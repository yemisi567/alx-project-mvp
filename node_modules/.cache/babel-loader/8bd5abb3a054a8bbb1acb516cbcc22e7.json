{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  cart: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.cart.find(x => x.id === action.payload.id);\n      let newCart;\n\n      if (existingItem) {\n        newCart = state.cart.map(item => {\n          var _action$payload;\n\n          return (item === null || item === void 0 ? void 0 : item.id) === ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.id) ? { ...item,\n            quantity: existingItem.quantity + 1\n          } : item;\n        });\n      } else {\n        newCart = [...state.cart, { ...action.payload,\n          quantity: 1\n        }];\n      }\n\n      state.cart = newCart;\n    },\n    removeFromCart: (state, action) => {\n      state.cart = state.cart.map(item => {\n        if (item.id === action.payload) {\n          item.quantity -= 1;\n        }\n\n        return item;\n      });\n    },\n    deleteFromCart: (state, action) => {\n      state.cart = state.cart.filter(item => item.id !== action.payload);\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  deleteFromCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/renbamidele/Desktop/alx-mvp-project/src/redux/cart/slice.js"],"names":["createSlice","initialState","cart","cartSlice","name","reducers","addToCart","state","action","existingItem","find","x","id","payload","newCart","map","item","quantity","removeFromCart","deleteFromCart","filter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B,YAAMC,YAAY,GAAGF,KAAK,CAACL,IAAN,CAAWQ,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,OAAP,CAAeD,EAA/C,CAArB;AACA,UAAIE,OAAJ;;AACA,UAAIL,YAAJ,EAAkB;AAChBK,QAAAA,OAAO,GAAGP,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAgBC,IAAD;AAAA;;AAAA,iBACvB,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEJ,EAAN,0BAAaJ,MAAM,CAACK,OAApB,oDAAa,gBAAgBD,EAA7B,IACI,EAAE,GAAGI,IAAL;AAAWC,YAAAA,QAAQ,EAAER,YAAY,CAACQ,QAAb,GAAwB;AAA7C,WADJ,GAEID,IAHmB;AAAA,SAAf,CAAV;AAKD,OAND,MAMO;AACLF,QAAAA,OAAO,GAAG,CAAC,GAAGP,KAAK,CAACL,IAAV,EAAgB,EAAE,GAAGM,MAAM,CAACK,OAAZ;AAAqBI,UAAAA,QAAQ,EAAE;AAA/B,SAAhB,CAAV;AACD;;AACDV,MAAAA,KAAK,CAACL,IAAN,GAAaY,OAAb;AACD,KAdO;AAgBRI,IAAAA,cAAc,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAgBC,IAAD,IAAU;AACpC,YAAIA,IAAI,CAACJ,EAAL,KAAYJ,MAAM,CAACK,OAAvB,EAAgC;AAC9BG,UAAAA,IAAI,CAACC,QAAL,IAAiB,CAAjB;AACD;;AACD,eAAOD,IAAP;AACD,OALY,CAAb;AAMD,KAvBO;AAyBRG,IAAAA,cAAc,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWkB,MAAX,CAAmBJ,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYJ,MAAM,CAACK,OAA/C,CAAb;AACD;AA3BO;AAHyB,CAAD,CAA7B;AAkCP,OAAO,MAAM;AAAEP,EAAAA,SAAF;AAAaY,EAAAA,cAAb;AAA6BC,EAAAA;AAA7B,IAAgDhB,SAAS,CAACkB,OAAhE;AAEP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  cart: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.cart.find((x) => x.id === action.payload.id);\n      let newCart;\n      if (existingItem) {\n        newCart = state.cart.map((item) =>\n          item?.id === action.payload?.id\n            ? { ...item, quantity: existingItem.quantity + 1 }\n            : item\n        );\n      } else {\n        newCart = [...state.cart, { ...action.payload, quantity: 1 }];\n      }\n      state.cart = newCart;\n    },\n\n    removeFromCart: (state, action) => {\n      state.cart = state.cart.map((item) => {\n        if (item.id === action.payload) {\n          item.quantity -= 1;\n        }\n        return item;\n      });\n    },\n\n    deleteFromCart: (state, action) => {\n      state.cart = state.cart.filter((item) => item.id !== action.payload);\n    },\n  },\n});\n\nexport const { addToCart, removeFromCart, deleteFromCart } = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}